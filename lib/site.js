// Generated by CoffeeScript 1.3.3
(function() {
  var Handlebars, P, S, Site, bd, btf, configs, dt, fs, hl, marked, next, parent, path, potter, rock, _,
    __hasProp = {}.hasOwnProperty;

  P = require('autoresolve');

  rock = require('rock');

  path = require('path');

  fs = require('fs-extra');

  next = require('nextflow');

  S = require('string');

  dt = require('date-tokens');

  parent = require('parentpath');

  bd = require('batchdir');

  hl = require('highlight').Highlight;

  marked = require('marked');

  Handlebars = require('Handlebars');

  configs = require('fnoc').configs();

  _ = require('underscore');

  btf = require('batchtransform');

  potter = require(P('lib/potter'));

  Handlebars.registerHelper('list', function(items, options) {
    var key, out, val;
    out = '';
    for (key in items) {
      if (!__hasProp.call(items, key)) continue;
      val = items[key];
      out += options.fn(val);
    }
    return out;
  });

  marked.setOptions({
    gfm: true,
    pedantic: false,
    sanitize: true,
    highlight: function(code, lang) {
      return hl(code);
    }
  });

  Site = (function() {

    function Site(sitePath) {
      this.sitePath = sitePath;
      this._potterDir = path.join(this.sitePath, 'potter');
      this._dataDir = path.join(this._potterDir, 'data');
      this._buildDir = path.join(this.sitePath, 'build');
      this._articlesBuildDir = path.join(this._buildDir, 'articles');
      this._vendorBuildDir = path.join(this._buildDir, 'vendor');
      this._articleTemplateDir = path.join(this._potterDir, 'article_template');
      this._potterDataFile = path.join(this._potterDir, 'potter.json');
      this._articlesDataFile = path.join(this._dataDir, 'articles.json');
      this._pagesDataFile = path.join(this._dataDir, 'pages.json');
      this._tagsDataFile = path.join(this._dataDir, 'tags.json');
      this._articleLayoutFile = path.join(this._articleTemplateDir, 'layout.html');
      this._articleLayoutTmpl = '';
      this._articleUrlTmpl = '';
      this._articleIndexFile = path.join(this._articleTemplateDir, 'index.html');
      this._articleIndexTmpl = '';
      this._potterData = {};
      this._articlesData = {};
      this._pagesData = {};
      this._tagsData = {};
      this.initialized = false;
    }

    Site.prototype.addArticleEntry = function(title, tags) {
      var articleData, articleFile, month, now, slug, year;
      slug = potter.slugify(title);
      now = new Date();
      year = dt["eval"](now)['year'];
      month = dt["eval"](now)['month'];
      articleFile = path.join('articles', year, month, slug + '.md');
      articleData = {
        title: title,
        path: articleFile,
        createdAt: now.getTime(),
        tags: tags,
        published: false
      };
      this._articlesData.articles[slug + '-' + now.toISOString()] = articleData;
      return articleFile;
    };

    Site.prototype.generateSkeleton = function(callback) {
      return rock.create(this.sitePath, P('resources/rocks/default'), callback);
    };

    Site.prototype.initialize = function(callback) {
      var flow, self;
      self = this;
      return next(flow = {
        ERROR: function(err) {
          return callback(err);
        },
        loadPotterData: function() {
          return fs.readJSONFile(self._potterDataFile, this.next);
        },
        loadArticlesData: function(err, data) {
          self._potterData = data;
          return fs.readJSONFile(self._articlesDataFile, this.next);
        },
        loadTagsData: function(err, data) {
          self._articlesData = data;
          return fs.readJSONFile(self._tagsDataFile, this.next);
        },
        loadArticleTemplate: function(err, data) {
          self._tagsData = data;
          return fs.readFile(self._articleLayoutFile, 'utf8', this.next);
        },
        loadArticleIndexTemplate: function(err, data) {
          self._articleLayoutTmpl = Handlebars.compile(data);
          return fs.readFile(self._articleIndexFile, 'utf8', this.next);
        },
        done: function(err, data) {
          var _ref, _ref1, _ref2;
          self._articleIndexTmpl = Handlebars.compile(data);
          self._articleUrlTmpl = Handlebars.compile((_ref = self._potterData) != null ? (_ref1 = _ref.articles) != null ? (_ref2 = _ref1.dateUrls) != null ? _ref2.format : void 0 : void 0 : void 0);
          self.initialized = true;
          if (!(self._articlesData != null)) {
            self._articlesData = {};
          }
          if (!(self._articlesData.articles != null)) {
            self._articlesData.articles = {};
          }
          return callback(null);
        }
      });
    };

    Site.prototype.publishAllArticles = function(callback) {
      var flow, outputArticles, self;
      self = this;
      outputArticles = {};
      return next(flow = {
        ERROR: function(err) {
          return callback(err);
        },
        buildArticleDir: function() {
          return bd(self._articlesBuildDir).mkdir(this.next);
        },
        deleteVendorDir: function() {
          return bd(self._vendorBuildDir).remove(this.next);
        },
        copyVendor: function() {
          return fs.copy(P('vendor'), self._vendorBuildDir, this.next);
        },
        iterateArticles: function() {
          var articleFiles, articleKeys, b, nf;
          nf = this;
          articleKeys = _(self._articlesData.articles).keys();
          articleFiles = _(self._articlesData.articles).pluck('path');
          articleFiles = articleFiles.map(function(file) {
            return path.join(self.sitePath, file);
          });
          b = btf(articleFiles).transform(function(i, file, data, write) {
            var articleData, html, htmlFile, md, part, slug, _ref, _ref1, _ref2;
            slug = path.basename(file, '.md');
            md = marked(data.toString());
            articleData = self._articlesData.articles[articleKeys[i]];
            md = Handlebars.compile(md)({
              article: articleData
            });
            htmlFile = '';
            part = '';
            if ((_ref = self._potterData) != null ? (_ref1 = _ref.articles) != null ? (_ref2 = _ref1.dateUrls) != null ? _ref2.enable : void 0 : void 0 : void 0) {
              part = self._articleUrlTmpl(dt["eval"](new Date(article.obj.createdAt), 'date-'));
              htmlFile = path.join(self._articlesBuildDir, part, slug + '.html');
            } else {
              htmlFile = path.join(self._articlesBuildDir, slug + '.html');
            }
            configs["package"]['bootstrap-path'] = '../vendor/bootstrap-2.0.4/themes/readable/bootstrap.min.css';
            configs["package"]['highlight-path'] = '../vendor/highlight.js/styles/github.css';
            html = self._articleLayoutTmpl({
              body: md,
              potter: configs["package"],
              article: articleData
            });
            outputArticles[articleKeys[i]] = {
              path: htmlFile,
              title: articleData.title,
              createdAt: articleData.createdAt
            };
            return write(htmlFile, html);
          });
          b.error(function(err) {
            return nf.error(err);
          });
          return b.end(function() {
            return nf.next();
          });
        },
        generateIndex: function() {
          var html;
          outputArticles = _(outputArticles).sortBy(function(val) {
            return -val.createdAt;
          });
          console.log(JSON.stringify(outputArticles, null, 2));
          html = self._articleIndexTmpl({
            articles: outputArticles,
            potter: configs["package"]
          });
          return fs.writeFile(path.join(self._articlesBuildDir, 'index.html'), html, this.next);
        },
        done: function() {
          return callback(null);
        }
      });
    };

    Site.prototype.saveData = function(callback) {
      var flow, self;
      self = this;
      return next(flow = {
        ERROR: function(err) {
          return callback(err);
        },
        articleFile: function() {
          return fs.writeFile(self._articlesDataFile, JSON.stringify(self._articlesData, null, 2), this.next);
        },
        tagFile: function() {
          return fs.writeFile(self._tagsDataFile, JSON.stringify(self._tagsData, null, 2), this.next);
        },
        potterFile: function() {
          return fs.writeFile(self._potterDataFile, JSON.stringify(self._potterData, null, 2), this.next);
        },
        done: function() {
          return callback(null);
        }
      });
    };

    Site.create = function(path) {
      return new Site(path);
    };

    return Site;

  })();

  module.exports.Site = Site;

}).call(this);

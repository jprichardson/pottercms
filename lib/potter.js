// Generated by CoffeeScript 1.3.3
(function() {
  var Handlebars, P, S, TriggerFlow, configs, dt, fs, hl, inPotterPath, less, marked, newArticle, newSite, next, parent, path, publish, rock, slugify, util, _;

  rock = require('rock');

  S = require('string');

  next = require('nextflow');

  util = require('util');

  fs = require('fs-extra');

  path = require('path-extra');

  Handlebars = require('handlebars');

  TriggerFlow = require('triggerflow').TriggerFlow;

  marked = require('marked');

  configs = require('fnoc').configs();

  P = require('autoresolve');

  hl = require('highlight').Highlight;

  less = require('less');

  dt = require('date-tokens');

  _ = require('underscore');

  parent = require('parentpath');

  marked.setOptions({
    gfm: true,
    pedantic: false,
    sanitize: true,
    highlight: function(code, lang) {
      return hl(code);
    }
  });

  newSite = function(path, callback) {
    return rock.create(path, '/Users/jp/Dropbox/Projects/Personal/rocks/rock-potter', callback);
  };

  newArticle = function(title, tags, callback) {
    var articleData, articleDir, articleFile, month, now, potterArticleData, potterArticleFile, potterTagData, potterTagFile, tagArray, urlSlug, year;
    urlSlug = S(title).dasherize().toString();
    if (urlSlug[0] === '-') {
      urlSlug = urlSlug.replace('-', '');
    }
    tagArray = [];
    if (tags != null) {
      tagArray = tags.split(',');
    }
    now = new Date();
    year = now.getFullYear();
    month = ('0' + (now.getMonth() + 1)).slice(-2);
    articleDir = path.join('articles', util.format("%s/%s/", year, month));
    articleFile = path.join(articleDir, urlSlug + '.md');
    potterArticleFile = path.join(process.cwd(), 'potter', 'data', 'articles.json');
    potterTagFile = path.join(process.cwd(), 'potter', 'data', 'tags.json');
    potterArticleData = {};
    potterTagData = {};
    articleData = {
      title: title,
      path: articleFile,
      createdAt: now.getTime(),
      tags: tagArray,
      published: false
    };
    return next({
      ERROR: function(err) {
        return callback(err);
      },
      checkPotterPath: function() {
        return inPotterPath(this.next);
      },
      mkdir: function(inPotterPath) {
        if (!inPotterPath) {
          return callback(new Error('Not in the root of a Potter CMS directory. Please navigate to the root of your Potter CMS directory.'));
        } else {
          return fs.mkdir(articleDir, this.next);
        }
      },
      loadPotterArticleData: function() {
        return fs.readFile(potterArticleFile, this.next);
      },
      touchArtcle: function(err, articleJSON) {
        potterArticleData = JSON.parse(articleJSON != null ? articleJSON.toString() : void 0);
        if (!(potterArticleData != null)) {
          potterArticleData = {};
        }
        if (!(potterArticleData.articles != null)) {
          potterArticleData.articles = {};
        }
        if (potterArticleData != null) {
          potterArticleData.articles[urlSlug + '-' + now.toISOString()] = articleData;
        }
        return fs.writeFile(articleFile, '', this.next);
      },
      saveArticleData: function() {
        return fs.writeFile(potterArticleFile, JSON.stringify(potterArticleData, null, 4), this.next);
      },
      loadTagArticle: function() {
        return fs.readFile(potterTagFile, this.next);
      },
      saveTagData: function(err, tagJSON) {
        potterTagData = JSON.parse(tagJSON != null ? tagJSON.toString() : void 0);
        if (!(potterTagData != null)) {
          potterTagData = {};
        }
        if (!(potterTagData.tags != null)) {
          potterTagData.tags = {};
        }
        delete articleData.tags;
        tagArray.forEach(function(tag) {
          var tagData, _base;
          tagData = (_base = potterTagData.tags)[tag] || (_base[tag] = {
            articles: [],
            pages: []
          });
          return tagData.articles.push(articleData);
        });
        return fs.writeFile(potterTagFile, JSON.stringify(potterTagData, null, 4), this.next);
      },
      done: function() {
        return callback(null, articleFile);
      }
    });
  };

  publish = function(callback) {
    var articleBuildDir, articleTemplateDir, articlesToProcess, buildDir, layoutFile, layoutTmpl, outputFiles, potterArticleData, potterArticleFile, potterConf, potterConfFile;
    potterConfFile = path.join(process.cwd(), 'potter', 'potter.json');
    potterConf = {};
    articleTemplateDir = path.join(process.cwd(), 'potter', 'article_template');
    potterArticleFile = path.join(process.cwd(), 'potter', 'data', 'articles.json');
    potterArticleData = {};
    buildDir = path.join(process.cwd(), 'build');
    articleBuildDir = path.join(buildDir, 'articles');
    outputFiles = [];
    articlesToProcess = [];
    layoutFile = path.join(process.cwd(), 'potter', 'article_template', 'layout.html');
    layoutTmpl = '';
    return next({
      ERROR: function(err) {
        throw err;
      },
      checkPotterPath: function() {
        return inPotterPath(this.next);
      },
      loadPotterConf: function(inPotterPath) {
        if (!inPotterPath) {
          return callback(new Error('Not in the root of a Potter CMS directory. Please navigate to the root of your Potter CMS directory.'));
        } else {
          return fs.readJSONFile(potterConfFile, this.next);
        }
      },
      doesBuildDirExist: function(err, obj) {
        potterConf = obj;
        return fs.exists(buildDir, this.next);
      },
      makeBuildDir: function(buildDirExists) {
        if (buildDirExists) {
          return this.doesArticleBuildDirExist();
        } else {
          return fs.mkdir(buildDir, this.next);
        }
      },
      copyBootstrap: function() {
        return fs.copy(P('vendor'), path.join(buildDir, 'vendor'), this.next);
      },
      doesArticleBuildDirExist: function() {
        return fs.exists(articleBuildDir, this.next);
      },
      makeArticleBuildDir: function(articleBuildDirExists) {
        if (articleBuildDirExists) {
          return this.next();
        } else {
          return fs.mkdir(articleBuildDir, this.next);
        }
      },
      loadArticleData: function() {
        return fs.readJSONFile(potterArticleFile, this.next);
      },
      gatherArticleData: function(err, obj) {
        var articleObj, articles, key, _ref;
        potterArticleData = obj;
        articles = [];
        _ref = potterArticleData.articles;
        for (key in _ref) {
          articleObj = _ref[key];
          if (!articleObj.published) {
            articles.push({
              key: key,
              obj: articleObj
            });
          }
        }
        articlesToProcess = articles;
        return this.next();
      },
      loadT1s: function() {
        return fs.readFile(layoutFile, this.next);
      },
      compileLess: function(err, data) {
        var bootstrapFile, bootswatchFile, parser, variablesFile;
        layoutTmpl = data.toString();
        this.next();
        return;
        variablesFile = P('vendor/bootstrap-2.0.4/themes/readable/variables.less');
        bootswatchFile = P('vendor/bootstrap-2.0.4/themes/readable/bootswatch.less');
        bootstrapFile = P('vendor/bootstrap-2.0.4/themes/readable/bootstrap.css');
        parser = new less.Parser;
        return fs.readFile(variablesFile, function(err, data) {
          var variablesLess;
          variablesLess = data.toString();
          return fs.readFile(bootswatchFile, function(err, data) {
            var allLess, bootswatchLess;
            bootswatchLess = data.toString();
            allLess = variablesLess + '\n' + bootswatchLess;
            return parser.parse(allLess, function(err, tree) {
              if (err != null) {
                console.log('LESS ERROR');
                return;
              }
              return fs.writeFile(bootstrapFile, tree.toCSS({
                compress: false
              }), this.next);
            });
          });
        });
      },
      iterateArticles: function() {
        var article, articles, template, tf, urlTemplate, _i, _len, _ref, _ref1, _results;
        articles = articlesToProcess;
        tf = TriggerFlow.create({
          pending: articles.length
        }, this.next);
        template = Handlebars.compile(layoutTmpl);
        urlTemplate = null;
        if (potterConf != null ? (_ref = potterConf.articles) != null ? (_ref1 = _ref.dateUrls) != null ? _ref1.enable : void 0 : void 0 : void 0) {
          urlTemplate = Handlebars.compile(potterConf.articles.dateUrls.format);
        }
        _results = [];
        for (_i = 0, _len = articles.length; _i < _len; _i++) {
          article = articles[_i];
          _results.push((function(article) {
            return fs.readFile(article.obj.path, function(err, data) {
              var htmlFile, md, part, slug, _ref2, _ref3;
              if (err != null) {
                throw err;
              }
              slug = path.basename(article.obj.path, '.md');
              data = data.toString();
              md = marked(data);
              htmlFile = '';
              if (potterConf != null ? (_ref2 = potterConf.articles) != null ? (_ref3 = _ref2.dateUrls) != null ? _ref3.enable : void 0 : void 0 : void 0) {
                part = urlTemplate(dt["eval"](new Date(article.obj.createdAt), 'date-'));
                htmlFile = path.join(articleBuildDir, part, slug + '.html');
              } else {
                htmlFile = path.join(articleBuildDir, slug + '.html');
              }
              configs["package"]['bootstrap-path'] = '../vendor/bootstrap-2.0.4/themes/readable/bootstrap.min.css';
              configs["package"]['highlight-path'] = '../vendor/highlight.js/styles/github.css';
              return fs.writeFile(htmlFile, template({
                body: md,
                potter: configs["package"],
                title: article.obj.title
              }), function(err) {
                outputFiles.push(htmlFile);
                return tf.update({
                  pending: -1
                });
              });
            });
          })(article));
        }
        return _results;
      },
      generateIndex: function() {
        var _this = this;
        Handlebars.registerHelper('list', function(items, options) {
          var key, out, val;
          out = '';
          for (key in items) {
            val = items[key];
            out += options.fn(val);
          }
          return out;
        });
        return fs.readFile(path.join(process.cwd(), 'potter', 'article_template', 'index.html'), function(err, data) {
          var indexHtml;
          delete potterConf.articles;
          indexHtml = Handlebars.compile(data.toString())(_.extend(_.extend(potterArticleData, {
            potter: configs["package"]
          }), potterConf));
          return fs.writeFile(path.join(articleBuildDir, 'index.html'), indexHtml, _this.next);
        });
      },
      done: function() {
        return callback(null, outputFiles);
      }
    });
  };

  this.resolveAppDir = function(callback) {
    return parent.find('potter/potter.json', callback(dir));
  };

  slugify = function(s) {
    var sl;
    sl = S(s.replace(/[^\w\s-]/g, '')).dasherize().s;
    if (sl.charAt(0) === '-') {
      sl = sl.substr(1);
    }
    return sl;
  };

  module.exports.newSite = newSite;

  module.exports.newArticle = newArticle;

  module.exports.publish = publish;

  module.exports.slugify = slugify;

  inPotterPath = function(callback) {
    var articleDir, potterDir;
    articleDir = path.join(process.cwd(), 'articles');
    potterDir = path.join(process.cwd(), 'potter');
    return next({
      1: function() {
        return fs.exists(articleDir, this.next);
      },
      2: function(articleDirExists) {
        if (!articleDirExists) {
          return callback(false);
        } else {
          return fs.exists(potterDir, this.next);
        }
      },
      3: function(potterDirExists) {
        if (!potterDirExists) {
          return callback(false);
        } else {
          return callback(true);
        }
      }
    });
  };

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var P, Site, USAGE, argv, displayArticleHelp, displayHelp, displayPageHelp, displayPublishHelp, displayServeHelp, displayTagHelp, fnoc, fs, handleArticleArgs, main, opt, parent, util;

  fnoc = require('fnoc');

  util = require('util');

  P = require('autoresolve');

  fs = require('fs');

  Site = require(P('lib/site')).Site;

  parent = require('parentpath');

  USAGE = util.format("\nPotter [%s]: Install project templates.\n", 'configs.package.version');

  USAGE += "Usage: potter [new|article|a|build|page|pg|publish|pub|serve] [options]";

  opt = require('optimist').usage(USAGE);

  argv = opt.argv;

  main = function(potterDir) {
    var articleArgs, site;
    if (process.argv.length < 3) {
      return displayHelp();
    } else {
      switch (process.argv[2]) {
        case '--version':
          return console.log('Potter %s', 'configs.package.version');
        case 'help':
          switch (process.argv[3]) {
            case 'article':
            case 'a':
              return displayArticleHelp();
            case 'page':
            case 'pg':
              return displayPageHelp();
            case 'pub':
            case 'publish':
              return displayPublishHelp();
            case 'serve':
              return displayServeHelp();
            case 'tag':
              return displayTagHelp();
          }
          break;
        case 'new':
          if (process.argv[3] != null) {
            if (fs.existsSync(process.argv[3])) {
              return console.log("" + process.argv[3] + " already exists.");
            } else {
              return Site.create(process.argv[3]).generateSkeleton(function(err) {
                if (err != null) {
                  console.log(err);
                  return;
                }
                return console.log("Successfully created " + process.argv[3] + ".");
              });
            }
          } else {
            return console.log('Error Invalid path.\n  potter new [path]');
          }
          break;
        case 'article':
        case 'a':
          articleArgs = argv._.slice();
          articleArgs.splice(0, 1);
          return handleArticleArgs(articleArgs, argv.tags);
        case 'page':
        case 'pg':
          return console.log('Page functionality not yet implemented.');
        case 'publish':
        case 'pub':
          return console.log('functionality not yet implemented.');
        case 'build':
          site = Site.create(potterDir);
          return site.initialize(function(err) {
            if (err) {
              console.error(err);
              return;
            }
            return site.buildAllArticles(function(err, outputFiles) {
              if (err != null) {
                console.error(err);
                return;
              }
              return console.log("Successfully built.");
            });
          });
        case 'serve':
          site = Site.create(potterDir);
          return site.serve();
        default:
          return displayHelp();
      }
    }
  };

  displayHelp = function() {
    return console.log(opt.help());
  };

  displayArticleHelp = function() {
    return console.log('potter [article|a] new title [--tags tags].');
  };

  displayPageHelp = function() {
    return console.log('Not yet implemented.');
  };

  displayPublishHelp = function() {
    return console.log('Not yet implemented.');
  };

  displayServeHelp = function() {
    return console.log('Not yet implemented.');
  };

  displayTagHelp = function() {
    return console.log('Not yet implemented.');
  };

  handleArticleArgs = function(args, tags) {
    switch (args[0]) {
      case 'new':
        return potter.newArticle(args[1], tags, function(err, file) {
          if (err != null) {
            console.error(err);
            return;
          }
          return console.log("Successfully created " + file + ".");
        });
      default:
        return displayArticleHelp();
    }
  };

  main(process.cwd());

}).call(this);
